#+TITLE:Search Engines for Nyxt

The aim of nx-search-engines is to get rid of black box world of
search bookmarklets and search cookies by moving to the pretty land of
lispy syntax and small helper functions generating search URIs.

As an example, instead of fiddling with [[https://www.squarefree.com/bookmarklets/search.html][websites for search
bookmarklets]], you can define the DuckDuckGo search engine with
Terminal theme, instant answers turned off, and autocomplete
suggestions turned off with just a simple call to:

#+begin_src lisp
    (engines:duckduckgo :theme :terminal
                        :instant-answers nil
                        :autocomplete nil)
#+end_src

This will return your new fancy DuckDuckGo engine that you can append
to the =search-engines= in buffer configuration.

#+begin_src lisp
  (define-configuration buffer
    ((search-engines (append %slot-default
                             (list (engines:duckduckgo
                                    :theme :terminal
                                    :instant-answers nil
                                    :autocomplete nil))))))
#+end_src

* Geting Started
First, you need to clone this repository to where Nyxt can find it:
#+begin_src sh
  # The ~/.local/share/nyxt/extensions/ is the default path Nyxt looks
  # for extensions in. Change to wherever you set your extension path.
  git clone https://github.com/aartaka/nx-search-engines ~/.local/share/nyxt/extensions/nx-search-engines
#+end_src

The smallest possible configuration involving nx-search-engines is:
#+begin_src lisp
  ;; Load search-engines.lisp after loading nx-search-engines.
  (load-after-system :nx-search-engines (nyxt-init-file "search-engines.lisp"))
#+end_src
in your init file, and
#+begin_src lisp
  (in-package #:nyxt-user)

  ;; Define buffer search-engines slot to be a list of several
  ;; nx-search-engines-provided ones.
  (define-configuration (buffer web-buffer)
    ;; Enable `search-engine-mode' by default.
    ((default-modes (push 'search:search-engines-mode %slot-default))
     (override-map (keymap:define-key %slot-default
                     ;; Bind your favorite key to `search-hint'.
                     "C-c C-s" 'engines:search-hint))
     (search-engines (list (engines:google :shortcut "gmaps"
                                           :object :maps)
                           (engines:wordnet :shortcut "wn"
                                            :show-word-frequencies t)
                           (engines:google :shortcut "g"
                                           :safe-search nil)
                           (engines:duckduckgo :theme :terminal
                                               :help-improve-duckduckgo nil
                                               :homepage-privacy-tips nil
                                               :privacy-newsletter nil
                                               :newsletter-reminders nil
                                               :install-reminders nil
                                               :install-duckduckgo nil)))))
#+end_src
in search-engines.lisp (you need to create this file in the same
directory where your init.lisp is). This will give you four search
engines: WordNet, Google (maps and basic search) and DuckDuckGo. The
last engine in the list is the default one, so your next search will
end up in a cozy terminal-themed DuckDuckGo :)
* Engines
Helpers have lots of key arguments, but you don't need to use all of
these. Helpers rely on search engine default behavior, so you can omit
settings equal to defaults.

A syntax resembling CLHS/man pages is used in search engines description. Basically:
- square brackets mean an optional element,
- curly brackets mean a mandatory element with several bar-separated options,
- vertical bars mean that any of the bar-separated elements is fine,
- asterisks mean any number of the element it is set after,
- if there is a type name instead of actual value, then any value of that type is acceptable,
- additional pseudo-types are explained after the syntax definition,
- semicolons start comments.
** DuckDuckGo
Syntax for the DuckDuckGo-generating function is:
#+begin_src
  (duckduckgo [:shortcut string]
              [:fallback-url quri:uri]
              [:base-search-url string]
              ;; DuckDuckGo uses two (four?) object-related keywords.
              ;; To ensure the right search object, use both :object and :object2.
              [:object {:all | :images | :videos | :news}]
              [:object2 {:all | :images | :videos | :news}]
              [:theme {:default | :basic | :contrast | :dark | :gray | :terminal}]
              [:get-requests boolean]
              [:video-playback {:prompt-me | :always-ddg | :always-third-party}]
              [:redirect boolean]
              ;; Some of these are abbreviations added for convenience.
              ;; You can suggest yours if it's widespread in your country!
              [:region {:argentina | :australia | :austria | :belgium-fr | :belgium-nl |
                        :brazil | :bulgaria | :canada-en | :canada-fr | :catalonia | :chile |
                        :china | :colombia | :croatia | :czech-republic | :denmark | :estonia |
                        :finland | :france | :germany | :greece | :hong-kong | :hungary |
                        :india-en | :india | :indonesia-en | :indonesia | :ireland |
                        :israel-en | :israel | :italy | :japan | :korea | :latvia |
                        :lithuania | :malaysia-en | :malaysia | :mexico | :netherlands |
                        :new-zealand | :norway | :pakistan-en | :peru | :philippines-en |
                        :philippines | :poland | :portugal | :romania | :russia |
                        :russian-federation | :saudi-arabia | :singapore | :slovakia |
                        :slovenia | :south-africa | :spain-ca | :spain-es | :spain |
                        :sweden | :switzerland-de | :switzerland-fr | :taiwan | :thailand-en |
                        :thailand | :turkey | :us-english | :us-en | :us | :us-spanish |
                        :us-es | :ukraine | :united-kingdom | :uk | :vietnam-en | :vietnam}]
              ;; Not yet written properly, too much Unicode
              [:language string]
              [:safe-search {:moderate | :strict | :off}]
              [:instant-answers boolean]
              [:infinite-scroll-for-media boolean]
              [:infinite-scroll boolean]
              [:autocomplete-suggestions boolean]
              [:open-in-new-tab boolean]
              [:advertisements boolean]
              [:keyboard-shortcuts boolean]
              [:units-of-measure {:no-preference | :metric | :us-based}]
              [:map-rendering {:not-set | :best-available | :image-tiles}]
              [:page-break-numbers {:on | :off | :lines}]
              [:install-duckduckgo boolean]
              [:install-reminders boolean]
              [:privacy-newsletter boolean]
              [:newsletter-reminders boolean]
              [:homepage-privacy-tips boolean]
              [:help-improve-duckduckgo boolean]
              [:font font-name]
              [:font-size {:large | :small | :medium | :larger | :largest}]
              [:page-width {:normal | :wide | :super-wide}]
              [:center-alignment boolean]
              [:background-color color-code-string]
              [:header-behavior {:on-dynamic | :on-fixed | :off | :on-scrolling}]
              [:header-color color-code-string]
              [:result-title-font font-name]
              [:result-title-color color-code-string]
              [:result-visited-title-color color-code-string]
              [:result-title-underline boolean]
              [:result-description-color color-code-string]
              [:result-url-color color-code-string]
              [:result-module-color color-code-string]
              [:result-full-urls boolean]
              [:result-urls-above-snipper boolean]
              [:result-visible-checkmark boolean]
              [:site-icons boolean])

color-code-string := string of six hex numbers, e.g., "FF00A4"
;; Actually, you can use the font name, like "Proxima Nova".
font-name := {:proxima-nova | :arial | :century-gothic | :georgia | :helvetica | :helvetica-neue |
              :sans-serif | :segoe-ui | :serif | :times | :tahoma | :trebuchet-ms | :verdana}
#+end_src
Quite a long definition, eh?

Things left to do for DuckDuckGo:
- Bind language settings.
- Allow booleans where they fit (=:header-behavior=, =:safe-search=).

*** DuckDuckGo Images (=duckduckgo-images=)
A derived Image-search engine has the same syntax as the main one,
except that it defaults to images.
*** DuckDuckGo completion helper
    =make-duckduckgo-completion= returns a search-ready completion
    function (it's already included if you use =duckduckgo=). Syntax is:
#+begin_src
(make-duckduckgo-completion [:request-args list])
#+end_src

** Google
Syntax for Google helper is:
#+begin_src
(google [:shortcut string]
        [:fallback-url quri:uri]
        [:base-search-url string]
        [:safe-search boolean]
        [:object {:all | :image | :video | :news | :shopping | :books | :finance}])
#+end_src

Things left to do for Google:
- Bind object-specific sorting settings.
- Add keyword alias for =:safe-mode= (i.e., =:strict= as alias to =t=)
*** Google Images (=google-images=)
  Same as Google, but =:object= defaults to =:images=.
*** Google completion helper
    =make-google-completion= returns a search-ready completion function
    (it's already included if you use =google=). Syntax is:
#+begin_src
    (make-google-completion [:request-args list])
#+end_src

** Bing
Bing is /special/ -- it hosts separate types of searches on separate
paths, so we need to make several engines with different search-urls:
*** Plain Bing
Syntax is:
#+begin_src
(bing [:shortcut string]
      [:fallback-url quri:uri]
      [:base-search-url string]
      [:my-language-only boolean]
      [:my-country-only boolean]
      [:date {:all | :past-24-hours | :past-week | :past-month | :past-year |
              (bing-date local-time:timestamp local-time:timestamp)}])
#+end_src
Notice the use of =bind-date= helper -- it allows you to specify the
date for the search. Lower bound is January 1st, 1970, upper bound
is... uncertain.

Things to do:
- =:past-day= alias for =:past-24-hours= value of =:date=.
*** Bing Images
Syntax is:
#+begin_src
(bing-images [:shortcut string]
             [:fallback-url quri:uri]
             [:base-search-url string])
#+end_src
*** Bing Videos
Syntax is:
#+begin_src
(bing-videos [:shortcut string]
             [:fallback-url quri:uri]
             [:base-search-url string])
#+end_src
*** Bing Maps
Syntax is:
#+begin_src
(bing-maps [:shortcut string]
           [:fallback-url quri:uri]
           [:base-search-url string])
#+end_src
*** Bing News
Syntax is:
#+begin_src
(bing-news [:shortcut string]
           [:fallback-url quri:uri]
           [:base-search-url string]
           [:interval {:all | :past-5-minutes | :past-15-mimutes | :past-30-minutes |
                       :past-hour | :past-4-hours | :past-6-hours | :past-24-hours |
                       :past-day | :past-7-days | :past-week | :past-30-days | :past-month}])
#+end_src
*** Bing Shopping
Syntax is:
#+begin_src
(bing-shopping [:shortcut string]
               [:fallback-url quri:uri]
               [:base-search-url string])
#+end_src
** WordNet
While WordNet is not a general purpose search engine, it's a great
dictionary and a linguistic tool (I mostly use it as a dictionary,
though). Syntax is:
#+begin_src
(wordnet [:shortcut string]
         [:fallback-url quri:uri]
         [:base-search-url string]
         [:show-examples boolean]
         [:show-glosses boolean]
         [:show-word-frequencies boolean]
         [:show-db-locations boolean]
         [:show-lexical-file-info boolean]
         [:show-lexical-file-numbers boolean]
         [:show-sense-keys boolean]
         [:show-sense-numbers boolean])
#+end_src

Things to do:
- Shorten the keyword names?
** Wikipedia
   Wikipedia is included in Nyxt by default, and there's not much you
   can configure in it's search, but it should be in this repo :) Syntax:
#+begin_src
(wikipedia [:shortcut string]
           [:fallback-url quri:uri]
           [:base-search-url string]
           [:completion-function function])
#+end_src
*** Wikipedia completion function helper
    =make-wikipedia-completion= returns a search-ready completion
    function (it's already included if you use =wikipedia=). Syntax is:
#+begin_src
(make-wikipedia-completion [:suggestion-limit integer]
                           [:namespace namespace-keyword]
                           [:request-args list])

namespace-keyword := {:general | :talk | :user | :user-talk | :wikipedia | :wikipedia-talk |
                      :file | :file-talk | :media-wiki | :media-wiki-talk | :template |
                      :template-talk | :help | :help-talk | :category | :category-talk}
#+end_src

** Yahoo
   Yahoo is still under development (I'm trying to figure out its
   sorting mechanism). Usable, though. Syntax:
#+begin_src
(yahoo [:shortcut string]
       [:fallback-url quri:uri]
       [:base-search-url string]
       [:completion-function function]
       [:number-of-results number]
       [:encoding {:utf}]
       [:domain {:any | :dot-com | :dot-edu | :dot-gov | :dot-org}]
       [:date {:past-day | :past-week | :past-month}])
#+end_src
*** Yahoo completion helper
    =make-yahoo-completion= returns a search-ready completion
    function (it's already included if you use =yahoo=). Syntax is:
#+begin_src
(make-yahoo-completion [:suggestion-limit integer]
                       [:request-args list])
#+end_src
* =search-engines-mode=
This mode is enabling you to search the input field contents, links,
and images with your search engine of choice. Once it's enabled, you
can call =search-hint= command to search for a particular hint:
- It it's a link or image, it's URL will be searched. In case of image
  URL, an =image-search-url= of =search-engines-=mode= will be used.
- If it's an input area (=<input>= or =<textarea>=), search the text
  inside it.

To set the engines for =search-hint=, customize =search-engines-mode=:
#+begin_src lisp
  (define-configuration engines:search-engines-mode
    ((engines:search-engine (engines:duckduckgo))
     (engines:image-search-engine (engines:duckduckgo-images))))
#+end_src

* Future Plans
- Add more engines (see comments in search-engines.lisp).
